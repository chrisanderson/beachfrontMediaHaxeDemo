{
"version":3,
"file":"main.js",
"sourceRoot":"file:///",
"sources":["/Users/chrisanderson/development/haxe/beachfrontDemo/src/client/Main.hx"],
"sourcesContent":["package client;\n\n#if js\nimport js.Browser;\n#end\n\n@:expose\nclass Main\n{\n  public static var COMPILE_TARGET = 'unkown hinson';\n\n  public static function main()\n  {\n    #if js\n    COMPILE_TARGET = 'js';\n    #elseif flash\n    COMPILE_TARGET = 'flash';\n    #end\n\n    trace('main() COMPILE_TARGET: $COMPILE_TARGET');\n\n    var mainInstance = new Main();\n  }\n\n  public function new()\n  {\n    trace('new()');\n\n    _init();\n  }\n\n  private function _init():Void\n  {\n    trace('init()');\n\n    var tempFlashVars = {};\n    var tempSwfParams = {bgcolor:\"#eeeeee\"};\n\n    //these will trace to all targets (currently just flash and js)\n    trace({'tempFlashVars':tempFlashVars});\n    trace({'tempSwfParams':tempSwfParams});\n\n    //this only occurs when the js target is being compiled because of the compiler instructions #if js\n    //will blow up other targets like flash if the compiler instructions were not used\n    #if js\n    var tempSwfContainer = Browser.document.querySelector('#swfContainer');\n\n    trace({'tempSwfContainer':tempSwfContainer});\n\n    //if you don't want to wrap a library in a haxe extern you can use haxe magic to directly write to a target\n    //here i use __js__ to write raw js.  the untyped keyword tells haxe to not try to use any typing logic and to just accept the code as is\n    var tempSwfObject = untyped __js__('swfobject.embedSWF(\"swf/main.swf\", {0}, 400, 300, 10, null, {1}, {2})', tempSwfContainer, tempFlashVars, tempSwfParams);\n\n    //haxe's ability to remove traces won't remove direct calls to console Browser.console.log()\n    //but i added a gulp task to strip debug calls for the release target\n    Browser.console.log(\"this will only appear in the debug version of the js output\");\n    #end\n\n\n    var tempValue = 1;\n\n    trace(\"tempValue: \" + tempValue);\n\n    #if debug\n    //this increment doesn't occur in a release build\n    tempValue++;\n    #end\n\n    trace(\"tempValue: \" + tempValue);\n\n    tempValue++;\n\n    trace(\"tempValue: \" + tempValue);\n\n    #if js\n    var tempJsLog = Browser.document.querySelector('#jsLog');\n\n    //because we increment tempValue only in a debug build\n    //tempValue will be 3 for debug but 2 for release\n    tempJsLog.innerText += 'tempValue: ' + tempValue;\n    #end\n  }\n}"],
"names":[],
"mappings":";;0BAwBQ,fACP;CACE,WAAO;CAEP;;mBAjBY,RACd;CAEE,EAAkB;CAKlB,WAAO,TAAwB;CAEZ;;;OAUb,IACR;EACE,UAAO;EAEa;EACA,QAAS;EAG7B,UAAM,MAAiB;EACvB,UAAM,MAAiB;EAKA,DAAgC;EAEvD,UAAM,SAAoB;EAIE,iCAAgF,bAAkB,pBAAe;EAI7I,DAAoB;EAIJ;EAEhB,UAAM,TAAgB;EAItB;EAGA,UAAM,TAAgB;EAEtB;EAEA,UAAM,TAAgB;EAGN,DAAgC;EAIhD,EAAuB,AAAC,DAAe;;;6BAtEL;;;;"
}