{
"version":3,
"file":"main.js",
"sourceRoot":"file:///",
"sources":["/usr/local/lib/haxe/std/DateTools.hx","/usr/local/lib/haxe/std/js/_std/HxOverrides.hx","/usr/local/lib/haxe/std/js/_std/Std.hx","/usr/local/lib/haxe/std/StringBuf.hx","/usr/local/lib/haxe/std/StringTools.hx","/Users/chrisanderson/development/haxe/beachfrontDemo/src/client/Main.hx","/usr/local/lib/haxe/std/js/Boot.hx","/Users/chrisanderson/development/haxe/haxelib/compiletime/2,6,0/src/CompileTime.hx"],
"sourcesContent":["/*\n * Copyright (C)2005-2013 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tThe DateTools class contains some extra functionalities for handling `Date`\n\tinstances and timestamps.\n\n\tIn the context of haxe dates, a timestamp is defined as the number of\n\tmilliseconds elapsed since 1st January 1970.\n**/\nclass DateTools {\n\n\t#if php\n\t#elseif (neko && !(macro || interp))\n\tstatic var date_format = neko.Lib.load(\"std\",\"date_format\",2);\n\t#else\n\tprivate static function __format_get( d : Date, e : String ) : String {\n\t\treturn switch( e ){\n\t\t\tcase \"%\":\n\t\t\t\t\"%\";\n\t\t\tcase \"C\":\n\t\t\t\tuntyped StringTools.lpad(Std.string(Std.int(d.getFullYear()/100)),\"0\",2);\n\t\t\tcase \"d\":\n\t\t\t\tuntyped StringTools.lpad(Std.string(d.getDate()),\"0\",2);\n\t\t\tcase \"D\":\n\t\t\t\t__format(d,\"%m/%d/%y\");\n\t\t\tcase \"e\":\n\t\t\t\tuntyped Std.string(d.getDate());\n\t\t\tcase \"F\":\n\t\t\t\t__format(d,\"%Y-%m-%d\");\n\t\t\tcase \"H\",\"k\":\n\t\t\t\tuntyped StringTools.lpad(Std.string(d.getHours()),if( e == \"H\" ) \"0\" else \" \",2);\n\t\t\tcase \"I\",\"l\":\n\t\t\t\tvar hour = d.getHours()%12;\n\t\t\t\tuntyped StringTools.lpad(Std.string(hour == 0 ? 12 : hour),if( e == \"I\" ) \"0\" else \" \",2);\n\t\t\tcase \"m\":\n\t\t\t\tuntyped StringTools.lpad(Std.string(d.getMonth()+1),\"0\",2);\n\t\t\tcase \"M\":\n\t\t\t\tuntyped StringTools.lpad(Std.string(d.getMinutes()),\"0\",2);\n\t\t\tcase \"n\":\n\t\t\t\t\"\\n\";\n\t\t\tcase \"p\":\n\t\t\t\tuntyped if( d.getHours() > 11 ) \"PM\"; else \"AM\";\n\t\t\tcase \"r\":\n\t\t\t\t__format(d,\"%I:%M:%S %p\");\n\t\t\tcase \"R\":\n\t\t\t\t__format(d,\"%H:%M\");\n\t\t\tcase \"s\":\n\t\t\t\tStd.string(Std.int(d.getTime()/1000));\n\t\t\tcase \"S\":\n\t\t\t\tuntyped StringTools.lpad(Std.string(d.getSeconds()),\"0\",2);\n\t\t\tcase \"t\":\n\t\t\t\t\"\\t\";\n\t\t\tcase \"T\":\n\t\t\t\t__format(d,\"%H:%M:%S\");\n\t\t\tcase \"u\":\n\t\t\t\tuntyped{\n\t\t\t\t\tvar t = d.getDay();\n\t\t\t\t\tif( t == 0 ) \"7\"; else Std.string(t);\n\t\t\t\t}\n\t\t\tcase \"w\":\n\t\t\t\tuntyped Std.string(d.getDay());\n\t\t\tcase \"y\":\n\t\t\t\tuntyped StringTools.lpad(Std.string(d.getFullYear()%100),\"0\",2);\n\t\t\tcase \"Y\":\n\t\t\t\tuntyped Std.string(d.getFullYear());\n\t\t\tdefault:\n\t\t\t\tthrow \"Date.format %\"+e+\"- not implemented yet.\";\n\t\t}\n\t}\n\n\tprivate static function __format( d : Date, f : String ) : String {\n\t\tvar r = new StringBuf();\n\t\tvar p = 0;\n\t\twhile( true ){\n\t\t\tvar np = f.indexOf(\"%\", p);\n\t\t\tif( np < 0 )\n\t\t\t\tbreak;\n\n\t\t\tr.addSub(f,p,np-p);\n\t\t\tr.add( __format_get(d, f.substr(np+1,1) ) );\n\n\t\t\tp = np+2;\n\t\t}\n\t\tr.addSub(f,p,f.length-p);\n\t\treturn r.toString();\n\t}\n\t#end\n\n\t/**\n\t\tFormat the date `d` according to the format `f`. The format is\n\t\tcompatible with the `strftime` standard format, except that there is no\n\t\tsupport in Flash and JS for day and months names (due to lack of proper\n\t\tinternationalization API). On Haxe/Neko/Windows, some formats are not\n\t\tsupported.\n\t**/\n\tpublic static function format( d : Date, f : String ) : String {\n\t\t#if (neko && !(macro || interp))\n\t\t\treturn new String(untyped date_format(d.__t, f.__s));\n\t\t#elseif php\n\t\t\treturn untyped __call__(\"strftime\",f,d.__t);\n\t\t#else\n\t\t\treturn __format(d,f);\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns the result of adding timestamp `t` to Date `d`.\n\n\t\tThis is a convenience function for calling\n\t\t`Date.fromTime(d.getTime() + t)`.\n\t**/\n\tpublic static inline function delta( d : Date, t : Float ) : Date {\n\t\treturn Date.fromTime( d.getTime() + t );\n\t}\n\n\tstatic var DAYS_OF_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n\t/**\n\t\tReturns the number of days in the month of Date `d`.\n\n\t\tThis method handles leap years.\n\t**/\n\tpublic static function getMonthDays( d : Date ) : Int {\n\t\tvar month = d.getMonth();\n\t\tvar year = d.getFullYear();\n\n\t\tif (month != 1)\n\t\t\treturn DAYS_OF_MONTH[month];\n\n\t\tvar isB = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n\t\treturn if (isB) 29 else 28;\n\t}\n\n\t/**\n\t\tConverts a number of seconds to a timestamp.\n\t**/\n\tpublic static inline function seconds( n : Float ) : Float {\n\t\treturn n * 1000.0;\n\t}\n\n\t/**\n\t\tConverts a number of minutes to a timestamp.\n\t**/\n\tpublic static inline function minutes( n : Float ) : Float {\n\t\treturn n * 60.0 * 1000.0;\n\t}\n\n\t/**\n\t\tConverts a number of hours to a timestamp.\n\t**/\n\tpublic static inline function hours( n : Float ) : Float {\n\t\treturn n * 60.0 * 60.0 * 1000.0;\n\t}\n\n\t/**\n\t\tConverts a number of days to a timestamp.\n\t**/\n\tpublic static inline function days( n : Float ) : Float {\n\t\treturn n * 24.0 * 60.0 * 60.0 * 1000.0;\n\t}\n\n\t/**\n\t\tSeparate a date-time into several components\n\t**/\n\tpublic static function parse( t : Float ) {\n\t\tvar s = t / 1000;\n\t\tvar m = s / 60;\n\t\tvar h = m / 60;\n\t\treturn {\n\t\t\tms : t % 1000,\n\t\t\tseconds : Std.int(s % 60),\n\t\t\tminutes : Std.int(m % 60),\n\t\t\thours : Std.int(h % 24),\n\t\t\tdays : Std.int(h / 24),\n\t\t};\n\t}\n\n\t/**\n\t\tBuild a date-time from several components\n\t**/\n\tpublic static function make( o : { ms : Float, seconds : Int, minutes : Int, hours : Int, days : Int } ) {\n\t\treturn o.ms + 1000.0 * (o.seconds + 60.0 * (o.minutes + 60.0 * (o.hours + 24.0 * o.days)));\n\t}\n\n\t#if (js || flash || php || cpp || python)\n\t/**\n\t\tRetrieve Unix timestamp value from Date components. Takes same argument sequence as the Date constructor.\n\t**/\n\tpublic static #if (js || flash || php) inline #end function makeUtc(year : Int, month : Int, day : Int, hour : Int, min : Int, sec : Int ):Float {\n\t    #if (js || flash || python)\n\t\t   return untyped Date.UTC(year, month, day, hour, min, sec);\n\t\t#elseif php\n\t\t   return untyped __call__(\"gmmktime\", hour, min, sec, month + 1, day, year) * 1000;\n\t\t#elseif cpp\n\t\t  return untyped __global__.__hxcpp_utc_date(year,month,day,hour,min,sec)*1000.0 ;\n\t\t#else\n\t\t\t//TODO\n\t\t   return 0.;\n\t\t#end\n\t}\n\t#end\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:noDoc\nclass HxOverrides {\n\n\tstatic function dateStr( date :Date ) : String {\n\t\tvar m = date.getMonth() + 1;\n\t\tvar d = date.getDate();\n\t\tvar h = date.getHours();\n\t\tvar mi = date.getMinutes();\n\t\tvar s = date.getSeconds();\n\t\treturn date.getFullYear()\n\t\t\t+\"-\"+(if( m < 10 ) \"0\"+m else \"\"+m)\n\t\t\t+\"-\"+(if( d < 10 ) \"0\"+d else \"\"+d)\n\t\t\t+\" \"+(if( h < 10 ) \"0\"+h else \"\"+h)\n\t\t\t+\":\"+(if( mi < 10 ) \"0\"+mi else \"\"+mi)\n\t\t\t+\":\"+(if( s < 10 ) \"0\"+s else \"\"+s);\n\t}\n\n\tstatic function strDate( s : String ) : Date {\n\t\tswitch( s.length ) {\n\t\tcase 8: // hh:mm:ss\n\t\t\tvar k = s.split(\":\");\n\t\t\tvar d : Date = untyped __new__(Date);\n\t\t\tuntyped d[\"setTime\"](0);\n\t\t\tuntyped d[\"setUTCHours\"](k[0]);\n\t\t\tuntyped d[\"setUTCMinutes\"](k[1]);\n\t\t\tuntyped d[\"setUTCSeconds\"](k[2]);\n\t\t\treturn d;\n\t\tcase 10: // YYYY-MM-DD\n\t\t\tvar k = s.split(\"-\");\n\t\t\treturn new Date(cast k[0],cast untyped k[1] - 1,cast k[2],0,0,0);\n\t\tcase 19: // YYYY-MM-DD hh:mm:ss\n\t\t\tvar k = s.split(\" \");\n\t\t\tvar y = k[0].split(\"-\");\n\t\t\tvar t = k[1].split(\":\");\n\t\t\treturn new Date(cast y[0],cast untyped y[1] - 1,cast y[2],cast t[0],cast t[1],cast t[2]);\n\t\tdefault:\n\t\t\tthrow \"Invalid date format : \" + s;\n\t\t}\n\t}\n\n\tstatic function cca( s : String, index : Int ) : Null<Int> {\n\t\tvar x = (cast s).charCodeAt(index);\n\t\tif( x != x ) // fast isNaN\n\t\t\treturn untyped undefined; // isNaN will still return true\n\t\treturn x;\n\t}\n\n\tstatic function substr( s : String, pos : Int, ?len : Int ) : String {\n\t\tif( pos != null && pos != 0 && len != null && len < 0 ) return \"\";\n\t\tif( len == null ) len = s.length;\n\t\tif( pos < 0 ){\n\t\t\tpos = s.length + pos;\n\t\t\tif( pos < 0 ) pos = 0;\n\t\t}else if( len < 0 ){\n\t\t\tlen = s.length + len - pos;\n\t\t}\n\n\t\treturn (untyped s).substr(pos, len);\n\t}\n\n\tstatic function indexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i < 0) {\n\t\t\ti += len;\n\t\t\tif (i < 0) i = 0;\n\t\t}\n\t\twhile (i < len)\n\t\t{\n\t\t\tif (untyped __js__(\"a[i] === obj\"))\n\t\t\t\treturn i;\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tstatic function lastIndexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i >= len)\n\t\t\ti = len - 1;\n\t\telse if (i < 0)\n\t\t\ti += len;\n\t\twhile (i >= 0)\n\t\t{\n\t\t\tif (untyped __js__(\"a[i] === obj\"))\n\t\t\t\treturn i;\n\t\t\ti--;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tstatic function remove<T>( a : Array<T>, obj : T ) {\n\t\tvar i = a.indexOf(obj);\n\t\tif( i == -1 ) return false;\n\t\ta.splice(i,1);\n\t\treturn true;\n\t}\n\n\tstatic function iter<T>( a : Array<T> ) : Iterator<T> untyped {\n\t\treturn {\n\t\t\tcur : 0,\n\t\t\tarr : a,\n\t\t\thasNext : function() {\n\t\t\t\treturn __this__.cur < __this__.arr.length;\n\t\t\t},\n\t\t\tnext : function() {\n\t\t\t\treturn __this__.arr[__this__.cur++];\n\t\t\t}\n\t\t};\n\t}\n\n\tstatic function __init__() untyped {\n#if !js_es5\n\t\t__feature__('HxOverrides.indexOf', if( Array.prototype.indexOf ) __js__(\"HxOverrides\").indexOf = function(a,o,i) return Array.prototype.indexOf.call(a, o, i));\n\t\t__feature__('HxOverrides.lastIndexOf', if( Array.prototype.lastIndexOf ) __js__(\"HxOverrides\").lastIndexOf = function(a,o,i) return Array.prototype.lastIndexOf.call(a, o, i));\n#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport js.Boot;\n\n@:keepInit\n@:coreApi class Std {\n\n\tpublic static inline function is( v : Dynamic, t : Dynamic ) : Bool {\n\t\treturn untyped js.Boot.__instanceof(v,t);\n\t}\n\n\tpublic static inline function instance<T:{},S:T>( value : T, c : Class<S> ) : S {\n\t\treturn untyped __instanceof__(value, c) ? cast value : null;\n\t}\n\n\tpublic static function string( s : Dynamic ) : String {\n\t\treturn untyped js.Boot.__string_rec(s,\"\");\n\t}\n\n\tpublic static inline function int( x : Float ) : Int {\n\t\treturn (cast x) | 0;\n\t}\n\n\tpublic static function parseInt( x : String ) : Null<Int> {\n\t\tvar v = untyped __js__(\"parseInt\")(x, 10);\n\t\t// parse again if hexadecimal\n\t\tif( v == 0 && (x.charCodeAt(1) == 'x'.code || x.charCodeAt(1) == 'X'.code) )\n\t\t\tv = untyped __js__(\"parseInt\")(x);\n\t\tif( untyped __js__(\"isNaN\")(v) )\n\t\t\treturn null;\n\t\treturn cast v;\n\t}\n\n\tpublic static inline function parseFloat( x : String ) : Float {\n\t\treturn untyped __js__(\"parseFloat\")(x);\n\t}\n\n\tpublic static function random( x : Int ) : Int {\n\t\treturn untyped x <= 0 ? 0 : Math.floor(Math.random()*x);\n\t}\n\n\tstatic function __init__() : Void untyped {\n\t\t__feature__(\"js.Boot.getClass\",String.prototype.__class__ = __feature__(\"Type.resolveClass\",$hxClasses[\"String\"] = String,String));\n\t\t__feature__(\"js.Boot.isClass\",String.__name__ = __feature__(\"Type.getClassName\",[\"String\"],true));\n\t\t__feature__(\"Type.resolveClass\",$hxClasses[\"Array\"] = Array);\n\t\t__feature__(\"js.Boot.isClass\",Array.__name__ = __feature__(\"Type.getClassName\",[\"Array\"],true));\n\t\t__feature__(\"Date.*\", {\n\t\t\t__feature__(\"js.Boot.getClass\",__js__('Date').prototype.__class__ = __feature__(\"Type.resolveClass\",$hxClasses[\"Date\"] = __js__('Date'),__js__('Date')));\n\t\t\t__feature__(\"js.Boot.isClass\",__js__('Date').__name__ = [\"Date\"]);\n\t\t});\n\t\t__feature__(\"Int.*\",{\n\t\t\tvar Int = __feature__(\"Type.resolveClass\", $hxClasses[\"Int\"] = { __name__ : [\"Int\"] }, { __name__ : [\"Int\"] });\n\t\t});\n\t\t__feature__(\"Dynamic.*\",{\n\t\t\tvar Dynamic = __feature__(\"Type.resolveClass\", $hxClasses[\"Dynamic\"] = { __name__ : [\"Dynamic\"] }, { __name__ : [\"Dynamic\"] });\n\t\t});\n\t\t__feature__(\"Float.*\",{\n\t\t\tvar Float = __feature__(\"Type.resolveClass\", $hxClasses[\"Float\"] = __js__(\"Number\"), __js__(\"Number\"));\n\t\t\tFloat.__name__ = [\"Float\"];\n\t\t});\n\t\t__feature__(\"Bool.*\",{\n\t\t\tvar Bool = __feature__(\"Type.resolveEnum\",$hxClasses[\"Bool\"] = __js__(\"Boolean\"), __js__(\"Boolean\"));\n\t\t\tBool.__ename__ = [\"Bool\"];\n\t\t});\n\t\t__feature__(\"Class.*\",{\n\t\t\tvar Class = __feature__(\"Type.resolveClass\", $hxClasses[\"Class\"] = { __name__ : [\"Class\"] }, { __name__ : [\"Class\"] });\n\t\t});\n\t\t__feature__(\"Enum.*\",{\n\t\t\tvar Enum = {};\n\t\t});\n\t\t__feature__(\"Void.*\",{\n\t\t\tvar Void = __feature__(\"Type.resolveEnum\", $hxClasses[\"Void\"] = { __ename__ : [\"Void\"] }, { __ename__ : [\"Void\"] });\n\t\t});\n\n#if !js_es5\n\t\t__feature__(\"Array.map\",\n\t\t\tif( Array.prototype.map == null )\n\t\t\t\tArray.prototype.map = function(f) {\n\t\t\t\t\tvar a = [];\n\t\t\t\t\tfor( i in 0...__this__.length )\n\t\t\t\t\t\ta[i] = f(__this__[i]);\n\t\t\t\t\treturn a;\n\t\t\t\t}\n\t\t);\n\t\t__feature__(\"Array.filter\",\n\t\t\tif( Array.prototype.filter == null )\n\t\t\t\tArray.prototype.filter = function(f) {\n\t\t\t\t\tvar a = [];\n\t\t\t\t\tfor( i in 0...__this__.length ) {\n\t\t\t\t\t\tvar e = __this__[i];\n\t\t\t\t\t\tif( f(e) ) a.push(e);\n\t\t\t\t\t}\n\t\t\t\t\treturn a;\n\t\t\t\t}\n\t\t);\n#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n\tA String buffer is an efficient way to build a big string by appending small\n\telements together.\n\n\tIts cross-platform implementation uses String concatenation internally, but\n\tStringBuf may be optimized for different targets.\n\n\tUnlike String, an instance of StringBuf is not immutable in the sense that\n\tit can be passed as argument to functions which modify it by appending more\n\tvalues. However, the internal buffer cannot be modified.\n**/\nclass StringBuf {\n\n\tvar b:String;\n\n\t/**\n\t\tThe length of `this` StringBuf in characters.\n\t**/\n\tpublic var length(get,never) : Int;\n\n\t/**\n\t\tCreates a new StringBuf instance.\n\n\t\tThis may involve initialization of the internal buffer.\n\t**/\n\tpublic inline function new() {\n\t\tb = \"\";\n\t}\n\n\tinline function get_length() : Int {\n\t\treturn b.length;\n\t}\n\n\t/**\n\t\tAppends the representation of `x` to `this` StringBuf.\n\n\t\tThe exact representation of `x` may vary per platform. To get more\n\t\tconsistent behavior, this function should be called with\n\t\tStd.string(x).\n\n\t\tIf `x` is null, the String \"null\" is appended.\n\t**/\n\tpublic inline function add<T>( x : T ) : Void {\n\t\tb += x;\n\t}\n\n\t/**\n\t\tAppends the character identified by `c` to `this` StringBuf.\n\n\t\tIf `c` is negative or has another invalid value, the result is\n\t\tunspecified.\n\t**/\n\tpublic inline function addChar( c : Int ) : Void {\n\t\tb += String.fromCharCode(c);\n\t}\n\n\t/**\n\t\tAppends a substring of `s` to `this` StringBuf.\n\n\t\tThis function expects `pos` and `len` to describe a valid substring of\n\t\t`s`, or else the result is unspecified. To get more robust behavior,\n\t\t`this.add(s.substr(pos,len))` can be used instead.\n\n\t\tIf `s` or `pos` are null, the result is unspecified.\n\n\t\tIf `len` is omitted or null, the substring ranges from `pos` to the end\n\t\tof `s`.\n\t**/\n\tpublic inline function addSub( s : String, pos : Int, ?len : Int) : Void {\n\t\tb += (len == null ? s.substr(pos) : s.substr(pos, len));\n\t}\n\n\t/**\n\t\tReturns the content of `this` StringBuf as String.\n\n\t\tThe buffer is not emptied by this operation.\n\t**/\n\tpublic inline function toString() : String {\n\t\treturn b;\n\t}\n\n}\n","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n\tThis class provides advanced methods on Strings. It is ideally used with\n\t'using StringTools' and then acts as an extension to the String class.\n\n\tIf the first argument to any of the methods is null, the result is\n\tunspecified.\n**/\n#if cpp\nusing cpp.NativeString;\n#end\nclass StringTools {\n\t/**\n\t\tEncode an URL by using the standard format.\n\t**/\n\t#if (!java && !cpp) inline #end public static function urlEncode( s : String ) : String {\n\t\t#if flash\n\t\t\treturn untyped __global__[\"encodeURIComponent\"](s);\n\t\t#elseif neko\n\t\t\treturn untyped new String(_urlEncode(s.__s));\n\t\t#elseif js\n\t\t\treturn untyped encodeURIComponent(s);\n\t\t#elseif cpp\n\t\t\treturn untyped s.__URLEncode();\n\t\t#elseif java\n\t\t\ttry\n\t\t\t\treturn untyped __java__(\"java.net.URLEncoder.encode(s, \\\"UTF-8\\\")\")\n\t\t\tcatch (e:Dynamic) throw e;\n\t\t#elseif cs\n\t\t\treturn untyped cs.system.Uri.EscapeDataString(s);\n\t\t#elseif python\n\t\t\treturn python.lib.urllib.Parse.quote(s, \"\");\n\t\t#else\n\t\t\treturn null;\n\t\t#end\n\t}\n\n\t/**\n\t\tDecode an URL using the standard format.\n\t**/\n\t#if (!java && !cpp) inline #end public static function urlDecode( s : String ) : String {\n\t\t#if flash\n\t\t\treturn untyped __global__[\"decodeURIComponent\"](s.split(\"+\").join(\" \"));\n\t\t#elseif neko\n\t\t\treturn untyped new String(_urlDecode(s.__s));\n\t\t#elseif js\n\t\t\treturn untyped decodeURIComponent(s.split(\"+\").join(\" \"));\n\t\t#elseif cpp\n\t\t\treturn untyped s.__URLDecode();\n\t\t#elseif java\n\t\t\ttry\n\t\t\t\treturn untyped __java__(\"java.net.URLDecoder.decode(s, \\\"UTF-8\\\")\")\n\t\t\tcatch (e:Dynamic) throw e;\n\t\t#elseif cs\n\t\t\treturn untyped cs.system.Uri.UnescapeDataString(s);\n\t\t#elseif python\n\t\t\treturn python.lib.urllib.Parse.unquote(s);\n\t\t#else\n\t\t\treturn null;\n\t\t#end\n\t}\n\n\t/**\n\t\tEscapes HTML special characters of the string `s`.\n\n\t\tThe following replacements are made:\n\n\t\t- `&` becomes `&amp`;\n\t\t- `<` becomes `&lt`;\n\t\t- `>` becomes `&gt`;\n\n\t\tIf `quotes` is true, the following characters are also replaced:\n\n\t\t- `\"` becomes `&quot`;\n\t\t- `'` becomes `&#039`;\n\t**/\n\tpublic static function htmlEscape( s : String, ?quotes : Bool ) : String {\n\t\ts = s.split(\"&\").join(\"&amp;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n\t\treturn quotes ? s.split('\"').join(\"&quot;\").split(\"'\").join(\"&#039;\") : s;\n\t}\n\n\t/**\n\t\tUnescapes HTML special characters of the string `s`.\n\n\t\tThis is the inverse operation to htmlEscape, i.e. the following always\n\t\tholds: htmlUnescape(htmlEscape(s)) == s\n\n\t\tThe replacements follow:\n\n\t\t- `&amp;` becomes `&`\n\t\t- `&lt;` becomes `<`\n\t\t- `&gt;` becomes `>`\n\t\t- `&quot;` becomes `\"`\n\t\t- `&#039;` becomes `'`\n\t**/\n\tpublic static function htmlUnescape( s : String ) : String {\n\t\treturn s.split(\"&gt;\").join(\">\").split(\"&lt;\").join(\"<\").split(\"&quot;\").join('\"').split(\"&#039;\").join(\"'\").split(\"&amp;\").join(\"&\");\n\t}\n\n\t/**\n\t\tTells if the string `s` starts with the string `start`.\n\n\t\tIf `start` is null, the result is unspecified.\n\n\t\tIf `start` is the empty String \"\", the result is true.\n\t**/\n\tpublic static #if (cs || java) inline #end function startsWith( s : String, start : String ) : Bool {\n\t\t#if java\n\t\treturn untyped s.startsWith(start);\n\t\t#elseif cs\n\t\treturn untyped s.StartsWith(start);\n\t\t#elseif cpp\n\t\tif (s.length<start.length)\n\t\t\treturn false;\n\t\tvar p0 = s.c_str();\n\t\tvar p1 = start.c_str();\n\t\tfor(i in 0...start.length)\n\t\t\tif ( p0.at(i) != p1.at(i) )\n\t\t\t\treturn false;\n\t\treturn true;\n\t\t#else\n\t\treturn( s.length >= start.length && s.substr(0, start.length) == start );\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if the string `s` ends with the string `end`.\n\n\t\tIf `end` is null, the result is unspecified.\n\n\t\tIf `end` is the empty String \"\", the result is true.\n\t**/\n\tpublic static #if (cs || java) inline #end function endsWith( s : String, end : String ) : Bool {\n\t\t#if java\n\t\treturn untyped s.endsWith(end);\n\t\t#elseif cs\n\t\treturn untyped s.EndsWith(end);\n\t\t#elseif cpp\n\t\tif (s.length<end.length)\n\t\t\treturn false;\n\t\tvar p0 = s.c_str().add( s.length-end.length );\n\t\tvar p1 = end.c_str();\n\t\tfor(i in 0...end.length)\n\t\t\tif ( p0.at(i) != p1.at(i) )\n\t\t\t\treturn false;\n\t\treturn true;\n\t\t#else\n\t\tvar elen = end.length;\n\t\tvar slen = s.length;\n\t\treturn( slen >= elen && s.substr(slen - elen, elen) == end );\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if the character in the string `s` at position `pos` is a space.\n\n\t\tA character is considered to be a space character if its character code\n\t\tis 9,10,11,12,13 or 32.\n\n\t\tIf `s` is the empty String \"\", or if pos is not a valid position within\n\t\t`s`, the result is false.\n\t**/\n\tpublic static function isSpace( s : String, pos : Int ) : Bool {\n\t\t#if python\n\t\tif (s.length == 0 || pos < 0 || pos >= s.length) return false;\n\t\t#end\n\t\tvar c = s.charCodeAt( pos );\n\t\treturn (c > 8 && c < 14) || c == 32;\n\t}\n\n\t/**\n\t\tRemoves leading space characters of `s`.\n\n\t\tThis function internally calls isSpace() to decide which characters to\n\t\tremove.\n\n\t\tIf `s` is the empty String \"\" or consists only of space characters, the\n\t\tresult is the empty String \"\".\n\t**/\n\tpublic #if cs inline #end static function ltrim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.TrimStart();\n\t\t#else\n\t\tvar l = s.length;\n\t\tvar r = 0;\n\t\twhile( r < l && isSpace(s,r) ){\n\t\t\tr++;\n\t\t}\n\t\tif( r > 0 )\n\t\t\treturn s.substr(r, l-r);\n\t\telse\n\t\t\treturn s;\n\t\t#end\n\t}\n\n\t/**\n\t\tRemoves trailing space characters of `s`.\n\n\t\tThis function internally calls isSpace() to decide which characters to\n\t\tremove.\n\n\t\tIf `s` is the empty String \"\" or consists only of space characters, the\n\t\tresult is the empty String \"\".\n\t**/\n\tpublic #if cs inline #end static function rtrim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.TrimEnd();\n\t\t#else\n\t\tvar l = s.length;\n\t\tvar r = 0;\n\t\twhile( r < l && isSpace(s,l-r-1) ){\n\t\t\tr++;\n\t\t}\n\t\tif( r > 0 ){\n\t\t\treturn s.substr(0, l-r);\n\t\t}else{\n\t\t\treturn s;\n\t\t}\n\t\t#end\n\t}\n\n\t/**\n\t\tRemoves leading and trailing space characters of `s`.\n\n\t\tThis is a convenience function for ltrim(rtrim(s)).\n\t**/\n\tpublic #if (cs || java) inline #end static function trim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.Trim();\n\t\t#elseif java\n\t\treturn untyped s.trim();\n\t\t#else\n\t\treturn ltrim(rtrim(s));\n\t\t#end\n\t}\n\n\t/**\n\t\tConcatenates `c` to `s` until `s.length` is at least `l`.\n\n\t\tIf `c` is the empty String \"\" or if `l` does not exceed `s.length`,\n\t\t`s` is returned unchanged.\n\n\t\tIf `c.length` is 1, the resulting String length is exactly `l`.\n\n\t\tOtherwise the length may exceed `l`.\n\n\t\tIf `c` is null, the result is unspecified.\n\t**/\n\tpublic static function lpad( s : String, c : String, l : Int ) : String {\n\t\tif (c.length <= 0)\n\t\t\treturn s;\n\n\t\twhile (s.length < l) {\n\t\t\ts = c + s;\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t\tAppends `c` to `s` until `s.length` is at least `l`.\n\n\t\tIf `c` is the empty String \"\" or if `l` does not exceed `s.length`,\n\t\t`s` is returned unchanged.\n\n\t\tIf `c.length` is 1, the resulting String length is exactly `l`.\n\n\t\tOtherwise the length may exceed `l`.\n\n\t\tIf `c` is null, the result is unspecified.\n\t**/\n\tpublic static function rpad( s : String, c : String, l : Int ) : String {\n\t\tif (c.length <= 0)\n\t\t\treturn s;\n\n\t\twhile (s.length < l) {\n\t\t\ts = s + c;\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t\tReplace all occurences of the String `sub` in the String `s` by the\n\t\tString `by`.\n\n\t\tIf `sub` is the empty String \"\", `by` is inserted after each character\n\t\tof `s`. If `by` is also the empty String \"\", `s` remains unchanged.\n\n\t\tThis is a convenience function for `s.split(sub).join(by)`.\n\n\t\tIf `sub` or `by` are null, the result is unspecified.\n\t**/\n\tpublic static function replace( s : String, sub : String, by : String ) : String {\n\t\t#if java\n\t\tif (sub.length == 0)\n\t\t\treturn s.split(sub).join(by);\n\t\telse\n\t\t\treturn untyped s.replace(sub, by);\n\t\t#elseif cs\n\t\tif (sub.length == 0)\n\t\t\treturn s.split(sub).join(by);\n\t\telse\n\t\t\treturn untyped s.Replace(sub, by);\n\t\t#else\n\t\treturn s.split(sub).join(by);\n\t\t#end\n\t}\n\n\t/**\n\t\tEncodes `n` into a hexadecimal representation.\n\n\t\tIf `digits` is specified, the resulting String is padded with \"0\" until\n\t\tits length equals `digits`.\n\t**/\n\tpublic static function hex( n : Int, ?digits : Int ) {\n\t\t#if flash\n\t\t\tvar n : UInt = n;\n\t\t\tvar s : String = untyped n.toString(16);\n\t\t\ts = s.toUpperCase();\n\t\t#else\n\t\t\tvar s = \"\";\n\t\t\tvar hexChars = \"0123456789ABCDEF\";\n\t\t\tdo {\n\t\t\t\ts = hexChars.charAt(n&15) + s;\n\t\t\t\tn >>>= 4;\n\t\t\t} while( n > 0 );\n\t\t#end\n\t\t#if python\n\t\tif (digits != null && s.length < digits) {\n\t\t\tvar diff = digits - s.length;\n\t\t\tfor (_ in 0...diff) {\n\t\t\t\ts = \"0\" + s;\n\t\t\t}\n\t\t}\n\t\t#else\n\t\tif( digits != null )\n\t\t\twhile( s.length < digits )\n\t\t\t\ts = \"0\"+s;\n\t\t#end\n\t\treturn s;\n\t}\n\n\t/**\n\t\tReturns the character code at position `index` of String `s`, or an\n\t\tend-of-file indicator at if `position` equals `s.length`.\n\n\t\tThis method is faster than String.charCodeAt() on some platforms, but\n\t\tthe result is unspecified if `index` is negative or greater than\n\t\t`s.length`.\n\n\t\tEnd of file status can be checked by calling `StringTools.isEof` with\n\t\tthe returned value as argument.\n\n\t\tThis operation is not guaranteed to work if `s` contains the \\0\n\t\tcharacter.\n\t**/\n\tpublic static inline function fastCodeAt( s : String, index : Int ) : Int {\n\t\t#if neko\n\t\treturn untyped __dollar__sget(s.__s, index);\n\t\t#elseif cpp\n\t\treturn untyped s.cca(index);\n\t\t#elseif flash\n\t\treturn untyped s.cca(index);\n\t\t#elseif java\n\t\treturn ( index < s.length ) ? cast(_charAt(s, index), Int) : -1;\n\t\t#elseif cs\n\t\treturn ( cast(index, UInt) < s.length ) ? cast(s[index], Int) : -1;\n\t\t#elseif js\n\t\treturn (untyped s).charCodeAt(index);\n\t\t#elseif python\n\t\treturn if (index >= s.length) -1 else python.internal.UBuiltins.ord(python.Syntax.arrayAccess(s, index));\n\t\t#else\n\t\treturn untyped s.cca(index);\n\t\t#end\n\t}\n\n\t/*\n\t\tTells if `c` represents the end-of-file (EOF) character.\n\t*/\n\t@:noUsing public static inline function isEof( c : Int ) : Bool {\n\t\t#if (flash || cpp)\n\t\treturn c == 0;\n\t\t#elseif js\n\t\treturn c != c; // fast NaN\n\t\t#elseif neko\n\t\treturn c == null;\n\t\t#elseif cs\n\t\treturn c == -1;\n\t\t#elseif java\n\t\treturn c == -1;\n\t\t#elseif python\n\t\treturn c == -1;\n\t\t#else\n\t\treturn false;\n\t\t#end\n\t}\n\n\t#if java\n\tprivate static inline function _charAt(str:String, idx:Int):java.StdTypes.Char16 return untyped str._charAt(idx);\n\t#end\n\n\t#if neko\n\tprivate static var _urlEncode = neko.Lib.load(\"std\",\"url_encode\",1);\n\tprivate static var _urlDecode = neko.Lib.load(\"std\",\"url_decode\",1);\n\t#end\n\n}\n","package client;\n\n#if js\nimport js.Browser;\n#end\n\nusing DateTools;\n\n@:expose\nclass Main\n{\n  private static var _COMPILE_TARGET = 'unkown hinson';\n  private static var _BUILD_TARGET = 'unkown hinson';\n  private static var _COMPILE_DATE_TIME = CompileTime.buildDate();\n  private static var _COMPILE_DATE_TIME_STRING = CompileTime.buildDate().toString();\n  private static var _LAST_RUN_DATE_TIME_STRING = Date.now().toString();\n\n  public static function main()\n  {\n    #if js\n    _COMPILE_TARGET = 'js';\n    #elseif flash\n    _COMPILE_TARGET = 'flash';\n    #end\n\n    #if debug\n    _BUILD_TARGET = 'debug';\n    #elseif !debug\n    _BUILD_TARGET = 'release';\n    #end\n\n    trace('_COMPILE_TARGET: $_COMPILE_TARGET');\n    trace('_BUILD_TARGET: $_BUILD_TARGET');\n    trace('_COMPILE_DATE_TIME_STRING: $_COMPILE_DATE_TIME_STRING');\n    trace('_LAST_RUN_DATE_TIME_STRING: $_LAST_RUN_DATE_TIME_STRING');\n\n    trace('main()');\n\n    var mainInstance = new Main();\n  }\n\n  public function new()\n  {\n    trace('new()');\n\n    _init();\n  }\n\n  private function _init():Void\n  {\n    trace('init()');\n\n    var tempFlashVars = {};\n    var tempSwfParams =\n    {\n      menu:\"false\"\n      ,scale:\"noScale\"\n      ,allowFullscreen:\"true\"\n      ,allowScriptAccess:\"always\"\n      ,bgcolor:\"#eeeeee\"\n      ,wmode:\"direct\"\n    };\n\n    //these will trace to all targets (currently just flash and js)\n    trace({'tempFlashVars':tempFlashVars});\n    trace({'tempSwfParams':tempSwfParams});\n\n    //this only occurs when the js target is being compiled because of the compiler instructions #if js\n    //will blow up other targets like flash if the compiler instructions were not used\n    #if js\n    var tempAppTitle = Browser.document.querySelector('.app-title');\n    var tempSwfContainer = Browser.document.querySelector('#swfContainer');\n\n    trace({'tempAppTitle':tempAppTitle});\n    trace({'tempSwfContainer':tempSwfContainer});\n\n    //you can use methods etc using string interpolation using the ${} syntax\n    tempAppTitle.innerText += '\\n [last compile date-time ${_COMPILE_DATE_TIME.format(\"%m/%d/%Y %r\")}]';\n\n    //if you don't want to wrap a library in a haxe extern you can use haxe magic to directly write to a target\n    //here i use __js__ to write raw js.  the untyped keyword tells haxe to not try to use any typing logic and to just accept the code as is\n    var tempSwfObject = untyped __js__('swfobject.embedSWF(\"swf/main.swf\", {0}, \"100%\", 300, 10, null, {1}, {2})', tempSwfContainer, tempFlashVars, tempSwfParams);\n\n    //haxe's ability to remove traces won't remove direct calls to console Browser.console.log()\n    //but i added a gulp task to strip debug calls for the release target\n    Browser.console.log(\"this will only appear in the debug version of the js output\");\n    #end\n\n\n    var tempValue = 1;\n\n    trace(\"tempValue: \" + tempValue);\n\n    #if debug\n    //this increment doesn't occur in a release build\n    tempValue++;\n    #end\n\n    trace(\"tempValue: \" + tempValue);\n\n    tempValue++;\n\n    trace(\"tempValue: \" + tempValue);\n\n    #if js\n    var tempJsLog = Browser.document.querySelector('#jsLog');\n\n    tempJsLog.innerText += '\\n _BUILD_TARGET: ' + _BUILD_TARGET;\n\n    //because we increment tempValue only in a debug build\n    //tempValue will be 3 for debug but 2 for release\n    tempJsLog.innerText += '\\n tempValue: ' + tempValue;\n    #end\n  }\n}","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js;\n\nprivate class HaxeError extends js.Error {\n\n\tvar val:Dynamic;\n\n\tpublic function new(val:Dynamic) untyped {\n\t\tsuper();\n\t\tthis.val = __define_feature__(\"js.Boot.HaxeError\", val);\n\t\tthis.message = String(val);\n\t\tif (js.Error.captureStackTrace) js.Error.captureStackTrace(this, HaxeError);\n\t}\n}\n\n@:dox(hide)\nclass Boot {\n\n\tprivate static function __unhtml(s : String) {\n\t\treturn s.split(\"&\").join(\"&amp;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n\t}\n\n\tprivate static function __trace(v,i : haxe.PosInfos) {\n\t\tuntyped {\n\t\t\tvar msg = if( i != null ) i.fileName+\":\"+i.lineNumber+\": \" else \"\";\n\t\t\t#if jsfl\n\t\t\tmsg += __string_rec(v,\"\");\n\t\t\tfl.trace(msg);\n\t\t\t#else\n\t\t\tmsg += __string_rec(v, \"\");\n\t\t\tif( i != null && i.customParams != null )\n\t\t\t\tfor( v in i.customParams )\n\t\t\t\t\tmsg += \",\" + __string_rec(v, \"\");\n\t\t\tvar d;\n\t\t\tif( __js__(\"typeof\")(document) != \"undefined\" && (d = document.getElementById(\"haxe:trace\")) != null )\n\t\t\t\td.innerHTML += __unhtml(msg)+\"<br/>\";\n\t\t\telse if( __js__(\"typeof console\") != \"undefined\" && __js__(\"console\").log != null )\n\t\t\t\t__js__(\"console\").log(msg);\n\t\t\t#end\n\t\t}\n\t}\n\n\tprivate static function __clear_trace() {\n\t\tuntyped {\n\t\t\t#if jsfl\n\t\t\tfl.outputPanel.clear();\n\t\t\t#else\n\t\t\tvar d = document.getElementById(\"haxe:trace\");\n\t\t\tif( d != null )\n\t\t\t\td.innerHTML = \"\";\n\t\t\t#end\n\t\t}\n\t}\n\n\tstatic inline function isClass(o:Dynamic) : Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isClass\", o.__name__);\n\t}\n\n\tstatic inline function isEnum(e:Dynamic) : Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isEnum\", e.__ename__);\n\t}\n\n\tstatic function getClass(o:Dynamic) : Dynamic {\n\t\tif (Std.is(o, Array))\n\t\t\treturn Array;\n\t\telse {\n\t\t\tvar cl = untyped __define_feature__(\"js.Boot.getClass\", o.__class__);\n\t\t\tif (cl != null)\n\t\t\t\treturn cl;\n\t\t\tvar name = __nativeClassName(o);\n\t\t\tif (name != null)\n\t\t\t\treturn __resolveNativeClass(name);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@:ifFeature(\"has_enum\")\n\tprivate static function __string_rec(o,s:String) {\n\t\tuntyped {\n\t\t\tif( o == null )\n\t\t\t    return \"null\";\n\t\t\tif( s.length >= 5 )\n\t\t\t\treturn \"<...>\"; // too much deep recursion\n\t\t\tvar t = __js__(\"typeof(o)\");\n\t\t\tif( t == \"function\" && (isClass(o) || isEnum(o)) )\n\t\t\t\tt = \"object\";\n\t\t\tswitch( t ) {\n\t\t\tcase \"object\":\n\t\t\t\tif( __js__(\"o instanceof Array\") ) {\n\t\t\t\t\tif( o.__enum__ ) {\n\t\t\t\t\t\tif( o.length == 2 )\n\t\t\t\t\t\t\treturn o[0];\n\t\t\t\t\t\tvar str = o[0]+\"(\";\n\t\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\t\tfor( i in 2...o.length ) {\n\t\t\t\t\t\t\tif( i != 2 )\n\t\t\t\t\t\t\t\tstr += \",\" + __string_rec(o[i],s);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tstr += __string_rec(o[i],s);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn str + \")\";\n\t\t\t\t\t}\n\t\t\t\t\tvar l = o.length;\n\t\t\t\t\tvar i;\n\t\t\t\t\tvar str = \"[\";\n\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\tfor( i in 0...l )\n\t\t\t\t\t\tstr += (if (i > 0) \",\" else \"\")+__string_rec(o[i],s);\n\t\t\t\t\tstr += \"]\";\n\t\t\t\t\treturn str;\n\t\t\t\t}\n\t\t\t\tvar tostr;\n\t\t\t\ttry {\n\t\t\t\t\ttostr = untyped o.toString;\n\t\t\t\t} catch( e : Dynamic ) {\n\t\t\t\t\t// strange error on IE\n\t\t\t\t\treturn \"???\";\n\t\t\t\t}\n\t\t\t\tif( tostr != null && tostr != __js__(\"Object.toString\") && __typeof__(tostr) == \"function\" ) {\n\t\t\t\t\tvar s2 = o.toString();\n\t\t\t\t\tif( s2 != \"[object Object]\")\n\t\t\t\t\t\treturn s2;\n\t\t\t\t}\n\t\t\t\tvar k : String = null;\n\t\t\t\tvar str = \"{\\n\";\n\t\t\t\ts += \"\\t\";\n\t\t\t\tvar hasp = (o.hasOwnProperty != null);\n\t\t\t\t__js__(\"for( var k in o ) {\");\n\t\t\t\t\tif( hasp && !o.hasOwnProperty(k) )\n\t\t\t\t\t\t__js__(\"continue\");\n\t\t\t\t\tif( k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\" )\n\t\t\t\t\t\t__js__(\"continue\");\n\t\t\t\t\tif( str.length != 2 )\n\t\t\t\t\t\tstr += \", \\n\";\n\t\t\t\t\tstr += s + k + \" : \"+__string_rec(o[k],s);\n\t\t\t\t__js__(\"}\");\n\t\t\t\ts = s.substring(1);\n\t\t\t\tstr += \"\\n\" + s + \"}\";\n\t\t\t\treturn str;\n\t\t\tcase \"function\":\n\t\t\t\treturn \"<function>\";\n\t\t\tcase \"string\":\n\t\t\t\treturn o;\n\t\t\tdefault:\n\t\t\t\treturn String(o);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static function __interfLoop(cc : Dynamic,cl : Dynamic) {\n\t\tif( cc == null )\n\t\t\treturn false;\n\t\tif( cc == cl )\n\t\t\treturn true;\n\t\tvar intf : Dynamic = cc.__interfaces__;\n\t\tif( intf != null )\n\t\t\tfor( i in 0...intf.length ) {\n\t\t\t\tvar i : Dynamic = intf[i];\n\t\t\t\tif( i == cl || __interfLoop(i,cl) )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\treturn __interfLoop(cc.__super__,cl);\n\t}\n\n\t@:ifFeature(\"typed_catch\") private static function __instanceof(o : Dynamic,cl : Dynamic) {\n\t\tif( cl == null )\n\t\t\treturn false;\n\t\tswitch( cl ) {\n\t\tcase Int:\n\t\t\treturn (untyped __js__(\"(o|0) === o\"));\n\t\tcase Float:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"number\";\n\t\tcase Bool:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"boolean\";\n\t\tcase String:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"string\";\n\t\tcase Array:\n\t\t\treturn (untyped __js__(\"(o instanceof Array)\")) && o.__enum__ == null;\n\t\tcase Dynamic:\n\t\t\treturn true;\n\t\tdefault:\n\t\t\tif( o != null ) {\n\t\t\t\t// Check if o is an instance of a Haxe class or a native JS object\n\t\t\t\tif( (untyped __js__(\"typeof\"))(cl) == \"function\" ) {\n\t\t\t\t\tif( untyped __js__(\"o instanceof cl\") )\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tif( __interfLoop(getClass(o),cl) )\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if ( (untyped __js__(\"typeof\"))(cl) == \"object\" && __isNativeObj(cl) ) {\n\t\t\t\t\tif( untyped __js__(\"o instanceof cl\") )\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// do not use isClass/isEnum here\n\t\t\tuntyped __feature__(\"Class.*\",if( cl == Class && o.__name__ != null ) return true);\n\t\t\tuntyped __feature__(\"Enum.*\",if( cl == Enum && o.__ename__ != null ) return true);\n\t\t\treturn o.__enum__ == cl;\n\t\t}\n\t}\n\n\t@:ifFeature(\"typed_cast\") private static function __cast(o : Dynamic, t : Dynamic) {\n\t\tif (__instanceof(o, t)) return o;\n\t\telse throw \"Cannot cast \" +Std.string(o) + \" to \" +Std.string(t);\n\t}\n\n\tstatic var __toStr = untyped __js__(\"{}.toString\");\n\t// get native JS [[Class]]\n\tstatic function __nativeClassName(o:Dynamic):String {\n\t\tvar name = untyped __toStr.call(o).slice(8, -1);\n\t\t// exclude general Object and Function\n\t\t// also exclude Math and JSON, because instanceof cannot be called on them\n\t\tif (name == \"Object\" || name == \"Function\" || name == \"Math\" || name == \"JSON\")\n\t\t\treturn null;\n\t\treturn name;\n\t}\n\n\t// check for usable native JS object\n\tstatic function __isNativeObj(o:Dynamic):Bool {\n\t\treturn __nativeClassName(o) != null;\n\t}\n\n\t// resolve native JS class in the global scope:\n\tstatic function __resolveNativeClass(name:String) {\n\t\treturn untyped js.Lib.global[name];\n\t}\n\n}\n","/****\n* Copyright (c) 2013 Jason O'Neil\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*\n****/\n\nimport haxe.macro.Context;\nimport haxe.macro.Expr;\nimport haxe.macro.Type;\nimport haxe.macro.Format;\nimport haxe.Json;\n#if yaml\nimport yaml.Yaml;\nimport yaml.Parser;\nimport yaml.Renderer;\nimport yaml.util.ObjectMap;\n#end\nusing StringTools;\nusing Lambda;\n\nclass CompileTime\n{\n    /** Inserts a date object of the date and time that this was compiled */\n    macro public static function buildDate():ExprOf<Date> {\n        var date = Date.now();\n        var year = toExpr(date.getFullYear());\n        var month = toExpr(date.getMonth());\n        var day = toExpr(date.getDate());\n        var hours = toExpr(date.getHours());\n        var mins = toExpr(date.getMinutes());\n        var secs = toExpr(date.getSeconds());\n        return macro new Date($year, $month, $day, $hours, $mins, $secs);\n    }\n\n    /** Returns a string of the date and time that this was compiled */\n    macro public static function buildDateString():ExprOf<String> {\n        return toExpr(Date.now().toString());\n    }\n\n    /** Reads a file at compile time, and inserts the contents into your code as a string.  The file path is resolved using `Context.resolvePath`, so it will search all your class paths */\n    macro public static function readFile(path:String):ExprOf<String> {\n        return toExpr(loadFileAsString(path));\n    }\n\n    /** Reads a file at compile time, and inserts the contents into your code as an interpolated string, similar to using 'single $quotes'.  */\n    macro public static function interpolateFile(path:String):ExprOf<String> {\n        return Format.format( toExpr(loadFileAsString(path)) );\n    }\n\n    /** Same as readFile, but checks that the file is valid Json */\n    macro public static function readJsonFile(path:String):ExprOf<String> {\n        var content = loadFileAsString(path);\n        try Json.parse(content) catch (e:Dynamic) {\n            haxe.macro.Context.error('Json from $path failed to validate: $e', Context.currentPos());\n        }\n        return toExpr(content);\n    }\n\n    /** Same as readFile, but checks that the file is valid Json */\n    macro public static function parseJsonFile(path:String):ExprOf<{}> {\n        var content = loadFileAsString(path);\n        var obj = try Json.parse(content) catch (e:Dynamic) {\n            haxe.macro.Context.error('Json from $path failed to validate: $e', Context.currentPos());\n        }\n        return toExpr(obj);\n    }\n\n    #if yaml\n    macro public static function parseYamlFile(path:String) {\n      var content = loadFileAsString(path);\n      var data = Yaml.parse(content, Parser.options().useObjects());\n      var s = haxe.Json.stringify(data);\n      var json = haxe.Json.parse(s);\n      return toExpr(json);\n    }\n    #end\n\n\n    /** Same as readFile, but checks that the file is valid Xml */\n    macro public static function readXmlFile(path:String):ExprOf<String> {\n        var content = loadFileAsString(path);\n        try Xml.parse(content) catch (e:Dynamic) {\n            haxe.macro.Context.error('Xml from $path failed to validate: $e', Context.currentPos());\n        }\n        return toExpr(content);\n    }\n\n    #if markdown\n        /** Same as readFile, but checks that the file is valid Xml */\n        macro public static function readMarkdownFile(path:String):ExprOf<String> {\n            var content = loadFileAsString(path);\n            try {\n                content = Markdown.markdownToHtml( content );\n                Xml.parse(content);\n            } catch (e:Dynamic) {\n                haxe.macro.Context.error('Markdown from $path did not produce valid XML: $e', Context.currentPos());\n            }\n            return toExpr(content);\n        }\n    #end\n\n    /** Import a package at compile time.  Is a simple mapping to haxe.macro.Compiler.include(), but means you don't have to wrap your code in conditionals. */\n    macro public static function importPackage(path:String, ?recursive:Bool = true, ?ignore : Array<String>, ?classPaths : Array<String>) {\n        haxe.macro.Compiler.include(path, recursive, ignore, classPaths);\n        return toExpr(0);\n    }\n\n    /** Returns an Array of Classes.  By default it will return all classes, but you can also search for classes in a particular package,\n    classes that extend a particular type, and you can choose whether to look for classes recursively or not. */\n    macro public static function getAllClasses<T>(?inPackage:String, ?includeChildPackages:Bool = true, ?extendsBaseClass:ExprOf<Class<T>>):ExprOf<Iterable<Class<T>>> {\n        var p = Context.currentPos();\n        var baseClass:ClassType = getClassTypeFromExpr(extendsBaseClass);\n        var baseClassName:String = (baseClass == null) ? \"\" : baseClass.pack.join('.') + '.' + baseClass.name;\n        var listIDExpr = toExpr(inPackage + \",\" + includeChildPackages + \",\" + baseClassName);\n        Context.onGenerate(checkForMatchingClasses.bind(inPackage, includeChildPackages, baseClass, listIDExpr, p));\n        if (extendsBaseClass!=null)\n            return macro CompileTimeClassList.getTyped($listIDExpr, $extendsBaseClass);\n        else\n            return macro CompileTimeClassList.get($listIDExpr);\n    }\n\n    #if macro\n        static function toExpr(v:Dynamic) {\n            return Context.makeExpr(v, Context.currentPos());\n        }\n\n        static function loadFileAsString(path:String) {\n            try {\n                var p = Context.resolvePath(path);\n                Context.registerModuleDependency(Context.getLocalModule(),p);\n                return sys.io.File.getContent(p);\n            }\n            catch(e:Dynamic) {\n                return haxe.macro.Context.error('Failed to load file $path: $e', Context.currentPos());\n            }\n        }\n\n        static function isSameClass(a:ClassType, b:ClassType):Bool {\n            return (\n                a.pack.join(\".\") == b.pack.join(\".\")\n                && a.name == b.name\n            );\n        }\n\n        static function implementsInterface(cls:ClassType, interfaceToMatch:ClassType):Bool {\n            while (cls!=null) {\n                for ( i in cls.interfaces ) {\n                    if (isSameClass(i.t.get(), interfaceToMatch)) {\n                        return true;\n                    }\n                }\n                if (cls.superClass!=null) {\n                    cls = cls.superClass.t.get();\n                }\n                else cls = null;\n            }\n            return false;\n        }\n\n        static function isSubClassOfBaseClass(subClass:ClassType, baseClass:ClassType):Bool {\n            var cls = subClass;\n            while (cls.superClass != null)\n            {\n                cls = cls.superClass.t.get();\n                if (isSameClass(baseClass, cls)) { return true; }\n            }\n            return false;\n        }\n\n        static function getClassTypeFromExpr(e:Expr):ClassType {\n            var ct:ClassType = null;\n            var fullClassName = null;\n            var parts = new Array<String>();\n            var nextSection = e.expr;\n            while (nextSection != null) {\n                // Break the loop unless we explicitly encounter a next section...\n                var s = nextSection;\n                nextSection = null;\n\n                switch (s) {\n                    // Might be a direct class name, no packages\n                    case EConst(c):\n                        switch (c) {\n                            case CIdent(s):\n                                if (s != \"null\") parts.unshift(s);\n                            default:\n                        }\n                    // Might be a fully qualified package name\n                    // { expr => EField({ expr => EField({ expr => EConst(CIdent(sys)), pos => #pos(src/server/Server.hx:35: characters 53-56) },db), pos => #pos(src/server/Server.hx:35: characters 53-59) },Object), pos => #pos(src/server/Server.hx:35: characters 53-66) }\n                    case EField(e, field):\n                        parts.unshift(field);\n                        nextSection = e.expr;\n                    default:\n                }\n            }\n            fullClassName = parts.join(\".\");\n            if (fullClassName != \"\") {\n                switch (Context.getType(fullClassName)) {\n                    case TInst(classType, _):\n                        ct = classType.get();\n                    default:\n                        throw \"Currently CompileTime.getAllClasses() can only search by package name or base class, not interface, typedef etc.\";\n                }\n            }\n            return ct;\n        }\n\n        static function checkForMatchingClasses(?inPackage:String, ?includeChildPackages:Bool = true, ?baseClass:ClassType, listIDExpr:Expr, p:Position, arr:Array<haxe.macro.Type>) {\n            var classesFound:Array<String> = [];\n            for (type in arr) {\n                switch (type) {\n                    // We only care for Classes\n                    case TInst(t, _):\n                        var include = true;\n\n                        if (t.get().isInterface)\n                            include = false;\n\n                        // Check if it belongs to a certain package or subpackage\n                        if (inPackage != null) {\n                            if (includeChildPackages) {\n                                if (t.toString().startsWith(inPackage) == false)\n                                    include = false;\n                            }\n                            else {\n                                var re = new EReg(\"^\" + inPackage + \"\\\\.([A-Z][a-zA-Z0-9]*)$\", \"\");\n                                if (re.match(t.toString()) == false)\n                                    include = false;\n                            }\n                        }\n\n                        // Check if it is a subclass of a certain type\n                        if (baseClass != null) {\n                            if (baseClass.isInterface) {\n                                if (implementsInterface(t.get(), baseClass) == false)\n                                    include = false;\n                            }\n                            else {\n                                if (isSubClassOfBaseClass(t.get(), baseClass) == false)\n                                    include = false;\n                            }\n                        }\n\n                        if (include)\n                            classesFound.push(t.toString());\n                    default:\n                }\n            }\n\n            // Create a list of all the qualified class names\n            var classNames = classesFound.map(function (c) { return c.toString(); });\n            var classNamesExpr = toExpr(classNames.join(\",\"));\n\n            // Get the CompileTimeClassList class\n            var ct:ClassType = null;\n            switch (Context.getType(\"CompileTimeClassList\")) {\n                case TInst(classType, _):\n                    ct = classType.get();\n                default:\n            }\n\n            // If the @classLists metadata already exists, get a copy of it and remove it\n            // (We'll re-add it in a minute)\n            var classListsMetaArray:Array<Expr>;\n            if (ct.meta.has('classLists')) {\n                classListsMetaArray = ct.meta.get().filter(function (i) { return i.name == \"classLists\"; })[0].params;\n                ct.meta.remove('classLists');\n            }\n            else {\n                classListsMetaArray = [];\n            }\n\n            // Add the class names to CompileTimeClassList as metadata\n            var itemAsArray = macro [$listIDExpr, $classNamesExpr];\n            classListsMetaArray.push(itemAsArray);\n            ct.meta.add('classLists', classListsMetaArray, Context.currentPos());\n\n            return;\n        }\n    #end\n}\n"],
"names":[],
"mappings":"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"
}